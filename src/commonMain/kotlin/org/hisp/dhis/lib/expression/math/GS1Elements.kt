package org.hisp.dhis.lib.expression.math

/*
 * Copyright (c) 2004-2018, University of Oslo
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * Neither the name of the HISP project nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
enum class GS1Elements(val element: String) {
    GS1_E0_IDENTIFIER("]E0"),

    // EAN-13, UPC-A, UPC-E
    GS1_E1_IDENTIFIER("]E1"),

    // Two-digit add-on symbol
    GS1_E2_IDENTIFIER("]E2"),

    // Five-digit add-on symbol
    GS1_E3_IDENTIFIER("]E3"),

    // EAN-13, UPC-A, UPC-E with add-on symbol
    GS1_E4_IDENTIFIER("]E4"),

    // EAN-8
    GS1_I1_IDENTIFIER("]I1"),

    // ITF-14
    GS1_C1_IDENTIFIER("]C1"),

    // GS1-128
    GS1_e0_IDENTIFIER("]e0"),

    // GS1 DataBar
    GS1_e1_IDENTIFIER("]e1"),

    // GS1 Composite
    GS1_e2_IDENTIFIER("]e2"),

    // GS1 Composite
    GS1_d2_IDENTIFIER("]d2"),

    // GS1 DataMatrix
    GS1_Q3_IDENTIFIER("]Q3"),

    // GS1 QR Code
    GS1_J1_IDENTIFIER("]J1"),

    // GS1 DotCode
    GS1_d1_IDENTIFIER("]d1"),

    // Data Matrix implementing ECC 200
    GS1_Q1_IDENTIFIER("]Q1"),

    // QR Code
    GS1_GROUP_SEPARATOR("\u001d"),
    SSCC("00"),
    GTIN("01"),
    CONTENT("02"),
    LOT_NUMBER("10"),
    PROD_DATE("11"),
    DUE_DATE("12"),
    PACK_DATE("13"),
    BEST_BEFORE_DATE("15"),
    SELL_BY("16"),
    EXP_DATE("17"),
    VARIANT("20"),
    SERIAL_NUMBER("21"),
    CPV("22"),
    TPX("235"),
    ADDITIONAL_ID("240"),
    CUSTOMER_PART_NUMBER("241"),
    MTO_VARIANT_NUMBER("242"),
    PCN("243"),
    SECONDARY_SERIAL("250"),
    REF_TO_SOURCE("251"),
    GDTI("253"),
    GLN_EXTENSION_COMPONENT("254"),
    GCN("255"),
    VAR_COUNT("30"),
    NET_WEIGHT_KG_0("3100"),
    NET_WEIGHT_KG_1("3101"),
    NET_WEIGHT_KG_2("3102"),
    NET_WEIGHT_KG_3("3103"),
    NET_WEIGHT_KG_4("3104"),
    NET_WEIGHT_KG_5("3105"),
    LENGTH_M_0("3110"),
    LENGTH_M_1("3111"),
    LENGTH_M_2("3112"),
    LENGTH_M_3("3113"),
    LENGTH_M_4("3114"),
    LENGTH_M_5("3115"),
    WIDTH_M_0("3120"),
    WIDTH_M_1("3121"),
    WIDTH_M_2("3122"),
    WIDTH_M_3("3123"),
    WIDTH_M_4("3124"),
    WIDTH_M_5("3125"),
    HEIGHT_M_0("3130"),
    HEIGHT_M_1("3131"),
    HEIGHT_M_2("3132"),
    HEIGHT_M_3("3133"),
    HEIGHT_M_4("3134"),
    HEIGHT_M_5("3135"),
    AREA_M2_0("3140"),
    AREA_M2_1("3141"),
    AREA_M2_2("3142"),
    AREA_M2_3("3143"),
    AREA_M2_4("3144"),
    AREA_M2_5("3145"),
    NET_VOLUME_L_0("3150"),
    NET_VOLUME_L_1("3151"),
    NET_VOLUME_L_2("3152"),
    NET_VOLUME_L_3("3153"),
    NET_VOLUME_L_4("3154"),
    NET_VOLUME_L_5("3155"),
    NET_VOLUME_M3_0("3160"),
    NET_VOLUME_M3_1("3161"),
    NET_VOLUME_M3_2("3162"),
    NET_VOLUME_M3_3("3163"),
    NET_VOLUME_M3_4("3164"),
    NET_VOLUME_M3_5("3165"),
    NET_WEIGHT_LB_0("3200"),
    NET_WEIGHT_LB_1("3201"),
    NET_WEIGHT_LB_2("3202"),
    NET_WEIGHT_LB_3("3203"),
    NET_WEIGHT_LB_4("3204"),
    NET_WEIGHT_LB_5("3205"),
    LENGTH_I_0("3210"),
    LENGTH_I_1("3211"),
    LENGTH_I_2("3212"),
    LENGTH_I_3("3213"),
    LENGTH_I_4("3214"),
    LENGTH_I_5("3215"),
    LENGTH_F_0("3220"),
    LENGTH_F_1("3221"),
    LENGTH_F_2("3222"),
    LENGTH_F_3("3223"),
    LENGTH_F_4("3224"),
    LENGTH_F_5("3225"),
    LENGTH_Y_0("3230"),
    LENGTH_Y_1("3231"),
    LENGTH_Y_2("3232"),
    LENGTH_Y_3("3233"),
    LENGTH_Y_4("3234"),
    LENGTH_Y_5("3235"),
    WIDTH_I_0("3240"),
    WIDTH_I_1("3241"),
    WIDTH_I_2("3242"),
    WIDTH_I_3("3243"),
    WIDTH_I_4("3244"),
    WIDTH_I_5("3245"),
    WIDTH_F_0("3250"),
    WIDTH_F_1("3251"),
    WIDTH_F_2("3252"),
    WIDTH_F_3("3253"),
    WIDTH_F_4("3254"),
    WIDTH_F_5("3255"),
    WIDTH_Y_0("3260"),
    WIDTH_Y_1("3261"),
    WIDTH_Y_2("3262"),
    WIDTH_Y_3("3263"),
    WIDTH_Y_4("3264"),
    WIDTH_Y_5("3265"),
    HEIGHT_I_0("3270"),
    HEIGHT_I_1("3271"),
    HEIGHT_I_2("3272"),
    HEIGHT_I_3("3273"),
    HEIGHT_I_4("3274"),
    HEIGHT_I_5("3275"),
    HEIGHT_F_0("3280"),
    HEIGHT_F_1("3281"),
    HEIGHT_F_2("3282"),
    HEIGHT_F_3("3283"),
    HEIGHT_F_4("3284"),
    HEIGHT_F_5("3285"),
    HEIGHT_Y_0("3290"),
    HEIGHT_Y_1("3291"),
    HEIGHT_Y_2("3292"),
    HEIGHT_Y_3("3293"),
    HEIGHT_Y_4("3294"),
    HEIGHT_Y_5("3295"),
    GROSS_WEIGHT_GF_0("3300"),
    GROSS_WEIGHT_GF_1("3301"),
    GROSS_WEIGHT_GF_2("3302"),
    GROSS_WEIGHT_GF_3("3303"),
    GROSS_WEIGHT_GF_4("3304"),
    GROSS_WEIGHT_GF_5("3305"),
    LENGTH_M_LOG_0("3310"),
    LENGTH_M_LOG_1("3311"),
    LENGTH_M_LOG_2("3312"),
    LENGTH_M_LOG_3("3313"),
    LENGTH_M_LOG_4("3314"),
    LENGTH_M_LOG_5("3315"),
    WIDTH_M_LOG_0("3320"),
    WIDTH_M_LOG_1("3321"),
    WIDTH_M_LOG_2("3322"),
    WIDTH_M_LOG_3("3323"),
    WIDTH_M_LOG_4("3324"),
    WIDTH_M_LOG_5("3325"),
    HEIGHT_M_LOG_0("3330"),
    HEIGHT_M_LOG_1("3331"),
    HEIGHT_M_LOG_2("3332"),
    HEIGHT_M_LOG_3("3333"),
    HEIGHT_M_LOG_4("3334"),
    HEIGHT_M_LOG_5("3335"),
    AREA_M2_LOG_0("3340"),
    AREA_M2_LOG_1("3341"),
    AREA_M2_LOG_2("3342"),
    AREA_M2_LOG_3("3343"),
    AREA_M2_LOG_4("3344"),
    AREA_M2_LOG_5("3345"),
    VOLUME_L_LOG_0("3350"),
    VOLUME_L_LOG_1("3351"),
    VOLUME_L_LOG_2("3352"),
    VOLUME_L_LOG_3("3353"),
    VOLUME_L_LOG_4("3354"),
    VOLUME_L_LOG_5("3355"),
    VOLUME_M3_LOG_0("3360"),
    VOLUME_M3_LOG_1("3361"),
    VOLUME_M3_LOG_2("3362"),
    VOLUME_M3_LOG_3("3363"),
    VOLUME_M3_LOG_4("3364"),
    VOLUME_M3_LOG_5("3365"),
    KG_PER_M2_0("3370"),
    KG_PER_M2_1("3371"),
    KG_PER_M2_2("3372"),
    KG_PER_M2_3("3373"),
    KG_PER_M2_4("3374"),
    KG_PER_M2_5("3375"),
    GROSS_WHEIGHT_LB_0("3400"),
    GROSS_WHEIGHT_LB_1("3401"),
    GROSS_WHEIGHT_LB_2("3402"),
    GROSS_WHEIGHT_LB_3("3403"),
    GROSS_WHEIGHT_LB_4("3404"),
    GROSS_WHEIGHT_LB_5("3405"),
    LENGTH_I_LOG_0("3410"),
    LENGTH_I_LOG_1("3411"),
    LENGTH_I_LOG_2("3412"),
    LENGTH_I_LOG_3("3413"),
    LENGTH_I_LOG_4("3414"),
    LENGTH_I_LOG_5("3415"),
    LENGTH_F_LOG_0("3420"),
    LENGTH_F_LOG_1("3421"),
    LENGTH_F_LOG_2("3422"),
    LENGTH_F_LOG_3("3423"),
    LENGTH_F_LOG_4("3424"),
    LENGTH_F_LOG_5("3425"),
    LENGTH_Y_LOG_0("3430"),
    LENGTH_Y_LOG_1("3431"),
    LENGTH_Y_LOG_2("3432"),
    LENGTH_Y_LOG_3("3433"),
    LENGTH_Y_LOG_4("3434"),
    LENGTH_Y_LOG_5("3435"),
    WIDTH_I_LOG_0("3440"),
    WIDTH_I_LOG_1("3441"),
    WIDTH_I_LOG_2("3442"),
    WIDTH_I_LOG_3("3443"),
    WIDTH_I_LOG_4("3444"),
    WIDTH_I_LOG_5("3445"),
    WIDTH_F_LOG_0("3450"),
    WIDTH_F_LOG_1("3451"),
    WIDTH_F_LOG_2("3452"),
    WIDTH_F_LOG_3("3453"),
    WIDTH_F_LOG_4("3454"),
    WIDTH_F_LOG_5("3455"),
    WIDTH_Y_LOG_0("3460"),
    WIDTH_Y_LOG_1("3461"),
    WIDTH_Y_LOG_2("3462"),
    WIDTH_Y_LOG_3("3463"),
    WIDTH_Y_LOG_4("3464"),
    WIDTH_Y_LOG_5("3465"),
    HEIGHT_I_LOG_0("3470"),
    HEIGHT_I_LOG_1("3471"),
    HEIGHT_I_LOG_2("3472"),
    HEIGHT_I_LOG_3("3473"),
    HEIGHT_I_LOG_4("3474"),
    HEIGHT_I_LOG_5("3475"),
    HEIGHT_F_LOG_0("3480"),
    HEIGHT_F_LOG_1("3481"),
    HEIGHT_F_LOG_2("3482"),
    HEIGHT_F_LOG_3("3483"),
    HEIGHT_F_LOG_4("3484"),
    HEIGHT_F_LOG_5("3485"),
    HEIGHT_Y_LOG_0("3490"),
    HEIGHT_Y_LOG_1("3491"),
    HEIGHT_Y_LOG_2("3492"),
    HEIGHT_Y_LOG_3("3493"),
    HEIGHT_Y_LOG_4("3494"),
    HEIGHT_Y_LOG_5("3495"),
    AREA_I2_0("3500"),
    AREA_I2_1("3501"),
    AREA_I2_2("3502"),
    AREA_I2_3("3503"),
    AREA_I2_4("3504"),
    AREA_I2_5("3505"),
    AREA_F2_0("3510"),
    AREA_F2_1("3511"),
    AREA_F2_2("3512"),
    AREA_F2_3("3513"),
    AREA_F2_4("3514"),
    AREA_F2_5("3515"),
    AREA_Y2_0("3520"),
    AREA_Y2_1("3521"),
    AREA_Y2_2("3522"),
    AREA_Y2_3("3523"),
    AREA_Y2_4("3524"),
    AREA_Y2_5("3525"),
    AREA_I2_LOG_0("3530"),
    AREA_I2_LOG_1("3531"),
    AREA_I2_LOG_2("3532"),
    AREA_I2_LOG_3("3533"),
    AREA_I2_LOG_4("3534"),
    AREA_I2_LOG_5("3535"),
    AREA_F2_LOG_0("3540"),
    AREA_F2_LOG_1("3541"),
    AREA_F2_LOG_2("3542"),
    AREA_F2_LOG_3("3543"),
    AREA_F2_LOG_4("3544"),
    AREA_F2_LOG_5("3545"),
    AREA_Y2_LOG_0("3550"),
    AREA_Y2_LOG_1("3551"),
    AREA_Y2_LOG_2("3552"),
    AREA_Y2_LOG_3("3553"),
    AREA_Y2_LOG_4("3554"),
    AREA_Y2_LOG_5("3555"),
    NET_WEIGHT_T_0("3560"),
    NET_WEIGHT_T_1("3561"),
    NET_WEIGHT_T_2("3562"),
    NET_WEIGHT_T_3("3563"),
    NET_WEIGHT_T_4("3564"),
    NET_WEIGHT_T_5("3565"),
    NET_VOLUME_OZ_0("3570"),
    NET_VOLUME_OZ_1("3571"),
    NET_VOLUME_OZ_2("3572"),
    NET_VOLUME_OZ_3("3573"),
    NET_VOLUME_OZ_4("3574"),
    NET_VOLUME_OZ_5("3575"),
    NET_VOLUME_Q_0("3600"),
    NET_VOLUME_Q_1("3601"),
    NET_VOLUME_Q_2("3602"),
    NET_VOLUME_Q_3("3603"),
    NET_VOLUME_Q_4("3604"),
    NET_VOLUME_Q_5("3605"),
    NET_VOLUME_G_0("3610"),
    NET_VOLUME_G_1("3611"),
    NET_VOLUME_G_2("3612"),
    NET_VOLUME_G_3("3613"),
    NET_VOLUME_G_4("3614"),
    NET_VOLUME_G_5("3615"),
    VOLUME_Q_LOG_0("3620"),
    VOLUME_Q_LOG_1("3621"),
    VOLUME_Q_LOG_2("3622"),
    VOLUME_Q_LOG_3("3623"),
    VOLUME_Q_LOG_4("3624"),
    VOLUME_Q_LOG_5("3625"),
    VOLUME_G_LOG_0("3630"),
    VOLUME_G_LOG_1("3631"),
    VOLUME_G_LOG_2("3632"),
    VOLUME_G_LOG_3("3633"),
    VOLUME_G_LOG_4("3634"),
    VOLUME_G_LOG_5("3635"),
    VOLUME_I3_0("3640"),
    VOLUME_I3_1("3641"),
    VOLUME_I3_2("3642"),
    VOLUME_I3_3("3643"),
    VOLUME_I3_4("3644"),
    VOLUME_I3_5("3645"),
    VOLUME_F3_0("3650"),
    VOLUME_F3_1("3651"),
    VOLUME_F3_2("3652"),
    VOLUME_F3_3("3653"),
    VOLUME_F3_4("3654"),
    VOLUME_F3_5("3655"),
    VOLUME_Y3_0("3660"),
    VOLUME_Y3_1("3661"),
    VOLUME_Y3_2("3662"),
    VOLUME_Y3_3("3663"),
    VOLUME_Y3_4("3664"),
    VOLUME_Y3_5("3665"),
    VOLUME_I3_LOG_0("3670"),
    VOLUME_I3_LOG_1("3671"),
    VOLUME_I3_LOG_2("3672"),
    VOLUME_I3_LOG_3("3673"),
    VOLUME_I3_LOG_4("3674"),
    VOLUME_I3_LOG_5("3675"),
    VOLUME_F3_LOG_0("3680"),
    VOLUME_F3_LOG_1("3681"),
    VOLUME_F3_LOG_2("3682"),
    VOLUME_F3_LOG_3("3683"),
    VOLUME_F3_LOG_4("3684"),
    VOLUME_F3_LOG_5("3685"),
    VOLUME_Y3_LOG_0("3690"),
    VOLUME_Y3_LOG_1("3691"),
    VOLUME_Y3_LOG_2("3692"),
    VOLUME_Y3_LOG_3("3693"),
    VOLUME_Y3_LOG_4("3694"),
    VOLUME_Y3_LOG_5("3695"),
    COUNT("37"),
    AMOUNT_0("3900"),
    AMOUNT_1("3901"),
    AMOUNT_2("3902"),
    AMOUNT_3("3903"),
    AMOUNT_4("3904"),
    AMOUNT_5("3905"),
    AMOUNT_6("3906"),
    AMOUNT_7("3907"),
    AMOUNT_8("3908"),
    AMOUNT_9("3909"),
    AMOUNT_ISO_0("3910"),
    AMOUNT_ISO_1("3911"),
    AMOUNT_ISO_2("3912"),
    AMOUNT_ISO_3("3913"),
    AMOUNT_ISO_4("3914"),
    AMOUNT_ISO_5("3915"),
    AMOUNT_ISO_6("3916"),
    AMOUNT_ISO_7("3917"),
    AMOUNT_ISO_8("3918"),
    AMOUNT_ISO_9("3919"),
    PRICE_0("3920"),
    PRICE_1("3921"),
    PRICE_2("3922"),
    PRICE_3("3923"),
    PRICE_4("3924"),
    PRICE_5("3925"),
    PRICE_6("3926"),
    PRICE_7("3927"),
    PRICE_8("3928"),
    PRICE_9("3929"),
    PRICE_ISO_0("3930"),
    PRICE_ISO_1("3931"),
    PRICE_ISO_2("3932"),
    PRICE_ISO_3("3933"),
    PRICE_ISO_4("3934"),
    PRICE_ISO_5("3935"),
    PRICE_ISO_6("3936"),
    PRICE_ISO_7("3937"),
    PRICE_ISO_8("3938"),
    PRICE_ISO_9("3939"),
    PRCNT_OFF_0("3940"),
    PRCNT_OFF_1("3941"),
    PRCNT_OFF_2("3942"),
    PRCNT_OFF_3("3943"),
    PRICE_UOM_0("3950"),
    PRICE_UOM_1("3951"),
    PRICE_UOM_2("3952"),
    PRICE_UOM_3("3953"),
    PRICE_UOM_4("3954"),
    PRICE_UOM_5("3955"),
    ORDER_NUMBER("400"),
    GINC("401"),
    ROUTE("403"),
    SHIP_TO_GLOB_LOC("410"),
    BILL_TO_LOC("411"),
    PURCHASED_FROM("412"),
    SHIP_FOR_LOG("413"),
    LOC_NUMBER("414"),
    PAY_TO("415"),
    PROD_SERV_LOC("416"),
    PARTY("417"),
    SHIP_TO_POST("420"),
    SHIP_TO_POST_ISO("421"),
    ORIGIN("422"),
    COUNTRY_INITIAL_PROCESS("423"),
    COUNTRY_PROCESS("424"),
    COUNTRY_DISASSEMBLY("425"),
    COUNTRY_FULL_PROCESS("426"),
    ORIGIN_SUBDIVISION("427"),
    SHIP_TO_COMP("4300"),
    SHIP_TO_NAME("4301"),
    SHIP_TO_ADD1("4302"),
    SHIP_TO_ADD2("4303"),
    SHIP_TO_SUB("4304"),
    SHIP_TO_LOCALITY("4305"),
    SHIP_TO_REG("4306"),
    SHIP_TO_COUNTRY("4307"),
    SHIP_TO_PHONE("4308"),
    RTN_TO_COMP("4310"),
    RTN_TO_NAME("4311"),
    RTN_TO_ADD1("4312"),
    RTN_TO_ADD2("4313"),
    RTN_TO_SUB("4314"),
    RTN_TO_LOCALITY("4315"),
    RTN_TO_REG("4316"),
    RTN_TO_COUNTRY("4317"),
    RTN_TO_POST("4318"),
    RTN_TO_PHONE("4319"),
    SRV_DESCRIPTION("4320"),
    DANGEROUS_GOODS("4321"),
    AUTH_LEAV("4322"),
    SIG_REQUIRED("4323"),
    NBEF_DEL_DT("4324"),
    NAFT_DEL_DT("4325"),
    REL_DATE("4326"),
    NSN("7001"),
    MEAT_CUT("7002"),
    EXP_TIME("7003"),
    ACTIVE_POTENCY("7004"),
    CATCH_AREA("7005"),
    FIRST_FREEZE_DATE("7006"),
    HARVEST_DATE("7007"),
    AQUATIC_SPECIES("7008"),
    FISHING_GEAR_TYPE("7009"),
    PROD_METHID("7010"),
    REFURB_LOT("7020"),
    FUNC_STAT("7021"),
    REV_STAT("7022"),
    GIAI_ASSEMBLY("7023"),
    PROCESSOR_NUMBER_0("7030"),
    PROCESSOR_NUMBER_1("7031"),
    PROCESSOR_NUMBER_2("7032"),
    PROCESSOR_NUMBER_3("7033"),
    PROCESSOR_NUMBER_4("7034"),
    PROCESSOR_NUMBER_5("7035"),
    PROCESSOR_NUMBER_6("7036"),
    PROCESSOR_NUMBER_7("7037"),
    PROCESSOR_NUMBER_8("7038"),
    PROCESSOR_NUMBER_9("7039"),
    UIC_EXT("7040"),
    NHRN_PZN("710"),
    NHRN_CIP("711"),
    NHRN_CN("712"),
    NHRN_DRN("713"),
    NHRN_AIM("714"),
    CERT_NUMBER_0("7230"),
    CERT_NUMBER_1("7231"),
    CERT_NUMBER_2("7232"),
    CERT_NUMBER_3("7233"),
    CERT_NUMBER_4("7234"),
    CERT_NUMBER_5("7235"),
    CERT_NUMBER_6("7236"),
    CERT_NUMBER_7("7237"),
    CERT_NUMBER_8("7238"),
    CERT_NUMBER_9("7239"),
    PROTOCOL("7240"),
    DIMENSIONS("8001"),
    CMT_NUMBER("8002"),
    GRAI("8003"),
    GIAI("8004"),
    PRICE_PER_UNIT("8005"),
    ITIP("8006"),
    IBAN("8007"),
    PROD_TIME("8008"),
    OPTSEN("8009"),
    CPID("8010"),
    CPID_SERIAL("8011"),
    VERSION("8012"),
    GMN("8013"),
    GSRN_PROVIDER("8017"),
    GSRN_RECIPIENT("8018"),
    SRIN("8019"),
    REF_NUMBER("8020"),
    ITIP_CONTENT("8026"),
    COUPON_USA("8110"),
    POINTS("8111"),
    POSITIVE_OFFER_COUPON_USA("8121"),
    PRODUCT_URL("8200"),
    AGREEMENT_INTERNAL("90"),
    COMPANY_INTERNAL_1("91"),
    COMPANY_INTERNAL_2("92"),
    COMPANY_INTERNAL_3("93"),
    COMPANY_INTERNAL_4("94"),
    COMPANY_INTERNAL_5("95"),
    COMPANY_INTERNAL_6("96"),
    COMPANY_INTERNAL_7("97"),
    COMPANY_INTERNAL_8("98"),
    COMPANY_INTERNAL_9("99");

    fun format(value: String?): String {
        return GS1Formatter.format(value, this)
    }

    companion object {

        fun fromKey(key: String): GS1Elements {
            return when (key) {
                "gtin" -> GTIN
                "lot number", "batch number" -> LOT_NUMBER
                "production date" -> PROD_DATE
                "best before date" -> BEST_BEFORE_DATE
                "expiration date" -> EXP_DATE
                "serial number" -> SERIAL_NUMBER
                else -> {
                    for (gs1Elements in entries) {
                        val keyIsGs1Element = gs1Elements.element == key
                        val keyIsGs1Name = keyIsGs1Name(gs1Elements, key)
                        if (keyIsGs1Element || keyIsGs1Name) {
                            return gs1Elements
                        }
                    }
                    throw IllegalArgumentException("invalid or not supported gs1 key")
                }
            }
        }

        private fun keyIsGs1Name(gs1Element: GS1Elements, key: String): Boolean {
            val gs1ElementSimplified = simplifiedGS1Key(gs1Element.name)
            val keySimplified = simplifiedGS1Key(key)
            return gs1ElementSimplified == keySimplified
        }

        private fun simplifiedGS1Key(value: String): String {
            return value.lowercase()
                .replace(" ", "")
                .replace("_", "")
                .replace("-", "")
        }

        fun getApplicationIdentifier(gs1Group: String): String {
            for (gs1Elements in entries) {
                val name = gs1Elements.element
                if (gs1Group.startsWith(name)) {
                    return name
                }
            }
            throw IllegalArgumentException("Could not retrieve ai from value")
        }
    }
}